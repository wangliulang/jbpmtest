<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd">
	<context:property-placeholder location="classpath*:/jdbc.properties" />
	<context:component-scan base-package="com.icss.*" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="100" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="3" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
		<!--#给出一条简单的sql语句进行验证 -->
		<property name="validationQuery" value="select 1" />
		<!--#在取出连接时进行有效验证 -->
		<property name="testOnBorrow" value="true" />
		<property name="removeAbandonedTimeout" value="120" />
		<property name="removeAbandoned" value="true" />
		<!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<!-- #连接的超时时间，默认为半小时。 -->
		<property name="minEvictableIdleTimeMillis" value="3000" />
	</bean>
	
	<!-- ########## Hibernate 会话 START ########## -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.icss.model</value>
			</list>
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath*:com/icss/**/*.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="hibernate.jdbc.fetch_size">20</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
			</props>
		</property>
	</bean>
	<!-- ########## Hibernate 会话 END ########## -->
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- ########## mybatis sql会话 START ########## -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 只是mapper文件的存放位置，当Mapper文件与对应的Mapper借口处于同一位置时，可以不指定该属性 -->
		<property name="mapperLocations" value="classpath*:com/icss/**/*Mapper.xml" />
		<!-- 实体类所在包名，指定后会自动取对应包中的类 -->
		<property name="typeAliasesPackage" value="com.icss.framework.model,com.icss.model" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">  
	    <constructor-arg index="0" ref="sqlSessionFactory"/>  
	</bean>
	<!-- ########## mybatis sql会话 END ########## -->
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="save*" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="*" read-only="false" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>	
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.icss.service.*.*(..)) or execution(* com.icss.framework.service.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	
	<!-- ########## 流程配置 START ########## -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="true" />
		<!-- 以下2个是为了防止生成流程图片时出现乱码 -->
		<property name="activityFontName" value="宋体" />
		<property name="labelFontName" value="宋体" />
	</bean>
	<!-- 流程引擎 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	<!-- 流程服务 -->
	<bean id="repositoryService" factory-bean="processEngine"
		factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine"
		factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine"
		factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine"
		factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine"
		factory-method="getManagementService" />
	<bean id="IdentityService" factory-bean="processEngine"
		factory-method="getIdentityService" />
	<!-- ########## 流程配置 END ########## -->
	
	<context:component-scan base-package="com.ruihe.web" />

	<mvc:annotation-driven />

	<mvc:default-servlet-handler />

	<mvc:resources mapping="/page/**" location="/page/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/themes/**" location="/themes/" />
	
	<aop:aspectj-autoproxy />
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/page/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringHttpMessageConverter" />
				<ref bean="mappingJackson2HttpMessageConverter" />
			</list>
		</property>

	</bean>

	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter" />

	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />



	<!-- ... -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<jaxws:server serviceClass="com.icss.service.impl.WebServiceImpl"
		address="/testws">
		<!-- <jaxws:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
			<bean class="org.apache.cxf.binding.soap.saaj.SAAJInInterceptor" />
			<bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
				<constructor-arg>
					<map>
						<entry key="action" value="UsernameToken" />
						<entry key="passwordType" value="PasswordText" />

						<entry key="passwordCallbackRef">
							<ref bean="serverPasswordCallback" />
						</entry>
					</map>
				</constructor-arg>
			</bean>
		</jaxws:inInterceptors> -->
	</jaxws:server>
	
	<task:annotation-driven scheduler="qbScheduler"/>  
    <task:scheduler id="qbScheduler" pool-size="10"/>
</beans>
